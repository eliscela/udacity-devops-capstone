version: 2.1

jobs:
  lint-app:
    docker:
      - image: cimg/python:3.10.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies
      - run:
          name: Install dependencies and lint
          command: |
            curl -L "https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64" -o ~/bin/hadolint && sudo chmod +x ~/bin/hadolint
            python3 -m venv .venv && source .venv/bin/activate && pip3 install -r requirements.txt
            pylint app.py --disable=C0111,C0114,C0116
            flake8 app.py
            hadolint Dockerfile
      - save_cache:
          paths:
            - .venv
          key: dependencies

  upload-image:
    docker:
      - image: cimg/aws:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Build docker image
          command: |
            docker build --tag=udacity-capstone .
            docker image ls

      - run:
          name: Upload image to Dockerhub
          command: |
            docker login -u=tahirsenpai -p="$DOCKER_TOKEN"
            docker tag udacity-capstone tahirsenpai/udacity-capstone
            docker push tahirsenpai/udacity-capstone

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Create/Update EKS network
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --stack-name "network" \
              --region us-east-1
      - run:
          name: Create/Update EKS Cluster
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --stack-name "cluster" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region us-east-1
          no_output_timeout: 30m
      - run:
          name: Create/Update Nodegroup
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --stack-name "nodes" \
              --capabilities CAPABILITY_NAMED_IAM \
              --region us-east-1
      - run:
          name: Create/Update management instances
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --stack-name "management" \
              --region us-east-1 \
              --output text >> ~/verify_deployment.txt
            cat ~/verify_deployment.txt
      - run:
          name: Get the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - verify_deployment.txt

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10.6
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:30:1c:b4:01:31:c6:09:5a:0d:71:f8:97:e4:29:b2"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
           pip install ansible
      - run:
          name: Configure server via Ansible
          command: |
            if grep -q "No changes to deploy" ~/verify_deployment.txt
              then
                cat ~/inventory.txt
                echo "Management instances were already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi
              
  configure-cluster:
    docker:
      - image: cimg/python:3.10.6
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:30:1c:b4:01:31:c6:09:5a:0d:71:f8:97:e4:29:b2"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Configure cluster via Ansible
          command: |
            if grep -q "No changes to deploy" ~/verify_deployment.txt
              then
                cat ~/inventory.txt
                echo "Management instances were already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for ELB to become reachable
          command: |
            if grep -q "No changes to deploy" ~/verify_deployment.txt
              then
                cat ~/inventory.txt
                echo "Management instances were already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Print out the ELB URL
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt save-url.yml
            cat ~/url.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - url.txt

  deploy-docker:
    docker:
      - image: cimg/python:3.10.6
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "17:30:1c:b4:01:31:c6:09:5a:0d:71:f8:97:e4:29:b2"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command: |
            pip install ansible
      - run:
          name: Deploy the latest built docker image
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml

workflows:
  default:
    jobs:
      - lint-app
      - upload-image:
          requires:
            - lint-app
          filters:
            branches:
              only: [ main ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ main ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-image
      - deploy-docker:
          requires:
            - configure-cluster